#include <verilated.h>      // Main Verilator header
#include <verilated_vcd_c.h> // VCD trace file writer header
#include "Vmux.h"           // Verilated module header, generated by Verilator

#include <iostream>
#include <cstdlib>
#include <ctime>

// Define maximum simulation time and clock period
#define MAX_SIM_TIME 300
#define CLK_PERIOD   10 // Clock period in ns

vluint64_t sim_time = 0; // Simulation time (64-bit integer)

// Helper function to advance simulation time and toggle clock
void eval(Vmux* top, VerilatedVcdC* tfp) {
    top->eval();
    tfp->dump(sim_time);
    sim_time += CLK_PERIOD / 2;
    top->clk = !top->clk;
    top->eval();
    tfp->dump(sim_time);
    sim_time += CLK_PERIOD / 2;
}

int main(int argc, char** argv) {
    Verilated::commandArgs(argc, argv); // Pass command line arguments to Verilated

    Vmux* top = new Vmux; // Instantiate Verilated module
    VerilatedVcdC* tfp = new VerilatedVcdC; // Trace file

    top->trace(tfp, 99); // Trace 99 levels of hierarchy
    tfp->open("waveform.vcd"); // Open waveform file

    // Initialize signals
    top->clk = 0;
    top->mux_sel = 0;
    top->en = 0;
    top->d_in = 0;

    // Simulation loop
    while (!Verilated::gotFinish() && sim_time < MAX_SIM_TIME) {
        eval(top, tfp);

        // Apply stimulus
        switch (sim_time) {
            case 50:
                top->mux_sel = 1; // Set mux_sel = 4'b0001
                top->en = 1;      // Set en[0] = 1
                top->d_in = 0xAAAA; // Set d_in = 16'hAAAA
                break;
            case 100:
                top->mux_sel = 4; // Set mux_sel = 4'b0100
                top->en = 4;      // Set en[2] = 1
                top->d_in = 0x5555; // Set d_in = 16'h5555
                break;
            case 150:
                top->mux_sel = 8; // Set mux_sel = 4'b1000
                top->en = 0x80;   // Set en[7] = 1
                top->d_in = 0x1234; // Set d_in = 16'h1234
                break;
            default:
                break;
        }
    }

    // Close VCD trace file
    tfp->close();

    // Cleanup
    delete top;
    delete tfp;

    exit(EXIT_SUCCESS);
}
