$version Generated by VerilatedVcd $end
$date Sat Jul  6 20:26:54 2024
 $end
$timescale   1ns $end

 $scope module TOP $end
  $var wire  1 K$ clk $end
  $var wire 16 }% d_out [15:0] $end
  $var wire  1 c$ done $end
  $var wire 16 k$ instr [15:0] $end
  $var wire 16 5% reg0 [15:0] $end
  $var wire 16 =% reg1 [15:0] $end
  $var wire 16 E% reg2 [15:0] $end
  $var wire 16 M% reg3 [15:0] $end
  $var wire 16 U% reg4 [15:0] $end
  $var wire 16 ]% reg5 [15:0] $end
  $var wire 16 e% reg6 [15:0] $end
  $var wire 16 m% reg7 [15:0] $end
  $var wire 16 s$ rega [15:0] $end
  $var wire 16 {$ regb [15:0] $end
  $var wire 16 %% regcc [15:0] $end
  $var wire 16 u% reginst [15:0] $end
  $var wire 16 -% regss [15:0] $end
  $var wire  1 S$ reset $end
  $var wire  1 [$ run $end
  $scope module bigger $end
   $var wire  8 o" addr [7:0] $end
   $var wire  1 K$ clk $end
   $var wire  8 /& d_in [7:0] $end
   $var wire 16 }% d_out [15:0] $end
   $var wire  1 c$ done $end
   $var wire  1 C$ en_instr $end
   $var wire 16 7& fetched_instruction [15:0] $end
   $var wire 16 k$ instr [15:0] $end
   $var wire  1 w" instr_valid $end
   $var wire 16 1# instruction [15:0] $end
   $var wire 16 ;$ mem_out [15:0] $end
   $var wire 16 5% reg0 [15:0] $end
   $var wire 16 =% reg1 [15:0] $end
   $var wire 16 E% reg2 [15:0] $end
   $var wire 16 M% reg3 [15:0] $end
   $var wire 16 U% reg4 [15:0] $end
   $var wire 16 ]% reg5 [15:0] $end
   $var wire 16 e% reg6 [15:0] $end
   $var wire 16 m% reg7 [15:0] $end
   $var wire 16 s$ rega [15:0] $end
   $var wire 16 {$ regb [15:0] $end
   $var wire 16 %% regcc [15:0] $end
   $var wire 16 u% reginst [15:0] $end
   $var wire 16 -% regss [15:0] $end
   $var wire  1 S$ reset $end
   $var wire  1 [$ run $end
   $var wire  1 g" run_bitty $end
   $var wire  1 !# valid_bitty $end
   $scope module instance1 $end
    $var wire  1 K$ clk $end
    $var wire  8 )# d_in [7:0] $end
    $var wire  8 o" d_out [7:0] $end
    $var wire  1 c$ en_pc $end
    $var wire  1 S$ reset $end
   $upscope $end
   $scope module instance2 $end
    $var wire  8 o" addr [7:0] $end
    $var wire  1 K$ clk $end
    $var wire 16 ;$ out [15:0] $end
   $upscope $end
   $scope module instance3 $end
    $var wire 16 E! alu_out [15:0] $end
    $var wire  3 }! alu_sel [2:0] $end
    $var wire  1 K$ clk $end
    $var wire 16 1# d_instr [15:0] $end
    $var wire 16 }% d_out [15:0] $end
    $var wire  1 c$ done $end
    $var wire  8 U! en [7:0] $end
    $var wire  1 m! en_c $end
    $var wire  1 u! en_inst $end
    $var wire  1 e! en_s $end
    $var wire 16 9# instruction [15:0] $end
    $var wire  3 M! mux_sel [2:0] $end
    $var wire 16 # out(0) [15:0] $end
    $var wire 16 $ out(1) [15:0] $end
    $var wire 16 % out(2) [15:0] $end
    $var wire 16 & out(3) [15:0] $end
    $var wire 16 ' out(4) [15:0] $end
    $var wire 16 ( out(5) [15:0] $end
    $var wire 16 ) out(6) [15:0] $end
    $var wire 16 * out(7) [15:0] $end
    $var wire 16 ]! out_mux [15:0] $end
    $var wire 16 5% reg0 [15:0] $end
    $var wire 16 =% reg1 [15:0] $end
    $var wire 16 E% reg2 [15:0] $end
    $var wire 16 M% reg3 [15:0] $end
    $var wire 16 U% reg4 [15:0] $end
    $var wire 16 ]% reg5 [15:0] $end
    $var wire 16 e% reg6 [15:0] $end
    $var wire 16 m% reg7 [15:0] $end
    $var wire 16 s$ rega [15:0] $end
    $var wire 16 {$ regb [15:0] $end
    $var wire 16 I# regc [15:0] $end
    $var wire 16 %% regcc [15:0] $end
    $var wire 16 u% reginst [15:0] $end
    $var wire 16 A# regs [15:0] $end
    $var wire 16 -% regss [15:0] $end
    $var wire  1 S$ reset $end
    $var wire  1 g" run $end
    $scope module alu_inst $end
     $var wire 16 E! alu_out [15:0] $end
     $var wire 16 A# in_a [15:0] $end
     $var wire 16 ]! in_b [15:0] $end
     $var wire 16 E! res [15:0] $end
     $var wire  3 }! select [2:0] $end
    $upscope $end
    $scope module cpu_inst $end
     $var wire  1 K$ clk $end
     $var wire  2 Q# cur_state [1:0] $end
     $var wire 16 9# d_inst [15:0] $end
     $var wire  1 c$ done $end
     $var wire  8 U! en [7:0] $end
     $var wire  1 m! en_c $end
     $var wire  1 u! en_inst $end
     $var wire  1 e! en_s $end
     $var wire  3 M! mux_sel [2:0] $end
     $var wire  2 '& next_state [1:0] $end
     $var wire  1 S$ reset $end
     $var wire  1 g" run $end
     $var wire  3 }! sel [2:0] $end
    $upscope $end
    $scope module genblk1(0) $end
     $scope module reg_out $end
      $var wire  1 K$ clk $end
      $var wire 16 I# d_in [15:0] $end
      $var wire  1 '" en $end
      $var wire 16 Y# mux_out [15:0] $end
      $var wire  1 S$ reset $end
      $var wire 16 G& starting [15:0] $end
     $upscope $end
    $upscope $end
    $scope module genblk1(1) $end
     $scope module reg_out $end
      $var wire  1 K$ clk $end
      $var wire 16 I# d_in [15:0] $end
      $var wire  1 /" en $end
      $var wire 16 a# mux_out [15:0] $end
      $var wire  1 S$ reset $end
      $var wire 16 G& starting [15:0] $end
     $upscope $end
    $upscope $end
    $scope module genblk1(2) $end
     $scope module reg_out $end
      $var wire  1 K$ clk $end
      $var wire 16 I# d_in [15:0] $end
      $var wire  1 7" en $end
      $var wire 16 i# mux_out [15:0] $end
      $var wire  1 S$ reset $end
      $var wire 16 G& starting [15:0] $end
     $upscope $end
    $upscope $end
    $scope module genblk1(3) $end
     $scope module reg_out $end
      $var wire  1 K$ clk $end
      $var wire 16 I# d_in [15:0] $end
      $var wire  1 ?" en $end
      $var wire 16 q# mux_out [15:0] $end
      $var wire  1 S$ reset $end
      $var wire 16 G& starting [15:0] $end
     $upscope $end
    $upscope $end
    $scope module genblk1(4) $end
     $scope module reg_out $end
      $var wire  1 K$ clk $end
      $var wire 16 I# d_in [15:0] $end
      $var wire  1 G" en $end
      $var wire 16 y# mux_out [15:0] $end
      $var wire  1 S$ reset $end
      $var wire 16 G& starting [15:0] $end
     $upscope $end
    $upscope $end
    $scope module genblk1(5) $end
     $scope module reg_out $end
      $var wire  1 K$ clk $end
      $var wire 16 I# d_in [15:0] $end
      $var wire  1 O" en $end
      $var wire 16 #$ mux_out [15:0] $end
      $var wire  1 S$ reset $end
      $var wire 16 G& starting [15:0] $end
     $upscope $end
    $upscope $end
    $scope module genblk1(6) $end
     $scope module reg_out $end
      $var wire  1 K$ clk $end
      $var wire 16 I# d_in [15:0] $end
      $var wire  1 W" en $end
      $var wire 16 +$ mux_out [15:0] $end
      $var wire  1 S$ reset $end
      $var wire 16 G& starting [15:0] $end
     $upscope $end
    $upscope $end
    $scope module genblk1(7) $end
     $scope module reg_out $end
      $var wire  1 K$ clk $end
      $var wire 16 I# d_in [15:0] $end
      $var wire  1 _" en $end
      $var wire 16 3$ mux_out [15:0] $end
      $var wire  1 S$ reset $end
      $var wire 16 G& starting [15:0] $end
     $upscope $end
    $upscope $end
    $scope module mux_inst $end
     $var wire 16 ]! mux_out [15:0] $end
     $var wire  3 M! mux_sel [2:0] $end
     $var wire 16 c reg0 [15:0] $end
     $var wire 16 k reg1 [15:0] $end
     $var wire 16 s reg2 [15:0] $end
     $var wire 16 { reg3 [15:0] $end
     $var wire 16 %! reg4 [15:0] $end
     $var wire 16 -! reg5 [15:0] $end
     $var wire 16 5! reg6 [15:0] $end
     $var wire 16 =! reg7 [15:0] $end
    $upscope $end
    $scope module reg_c $end
     $var wire  1 K$ clk $end
     $var wire 16 E! d_in [15:0] $end
     $var wire  1 m! en $end
     $var wire 16 I# mux_out [15:0] $end
     $var wire  1 S$ reset $end
     $var wire 16 ?& starting [15:0] $end
    $upscope $end
    $scope module reg_inst $end
     $var wire  1 K$ clk $end
     $var wire 16 1# d_in [15:0] $end
     $var wire  1 u! en $end
     $var wire 16 9# mux_out [15:0] $end
     $var wire  1 S$ reset $end
     $var wire 16 ?& starting [15:0] $end
    $upscope $end
    $scope module reg_s $end
     $var wire  1 K$ clk $end
     $var wire 16 ]! d_in [15:0] $end
     $var wire  1 e! en $end
     $var wire 16 A# mux_out [15:0] $end
     $var wire  1 S$ reset $end
     $var wire 16 ?& starting [15:0] $end
    $upscope $end
   $upscope $end
   $scope module instr_reg $end
    $var wire  1 K$ clk $end
    $var wire 16 ;$ d_in [15:0] $end
    $var wire  1 C$ en $end
    $var wire 16 1# mux_out [15:0] $end
    $var wire  1 S$ reset $end
    $var wire 16 ?& starting [15:0] $end
   $upscope $end
  $upscope $end
 $upscope $end
$enddefinitions $end


#0
b0000000000001010 #
b0000000000001010 $
b0000000000001010 %
b0000000000001010 &
b0000000000001010 '
b0000000000001010 (
b0000000000001010 )
b0000000000001010 *
b0000000000001010 c
b0000000000001010 k
b0000000000001010 s
b0000000000001010 {
b0000000000001010 %!
b0000000000001010 -!
b0000000000001010 5!
b0000000000001010 =!
b0000000000001010 E!
b000 M!
b00000000 U!
b0000000000001010 ]!
0e!
0m!
0u!
b000 }!
0'"
0/"
07"
0?"
0G"
0O"
0W"
0_"
0g"
b00000000 o"
1w"
0!#
b00000001 )#
b0000000000000000 1#
b0000000000000000 9#
b0000000000000000 A#
b0000000000000000 I#
b00 Q#
b0000000000001010 Y#
b0000000000001010 a#
b0000000000001010 i#
b0000000000001010 q#
b0000000000001010 y#
b0000000000001010 #$
b0000000000001010 +$
b0000000000001010 3$
b1011000011110010 ;$
1C$
1K$
1S$
1[$
0c$
b0000000000000000 k$
b0000000000000000 s$
b0000000000001010 {$
b0000000000000000 %%
b0000000000000000 -%
b0000000000001010 5%
b0000000000001010 =%
b0000000000001010 E%
b0000000000001010 M%
b0000000000001010 U%
b0000000000001010 ]%
b0000000000001010 e%
b0000000000001010 m%
b0000000000000000 u%
b0000000000000000 }%
b00 '&
b00000000 /&
b0000000000000000 7&
b0000000000000000 ?&
b0000000000001010 G&
#1
0K$
0S$
#2
1!#
b1011000011110010 1#
1K$
b1011000011110010 k$
#3
0K$
#4
1K$
#5
0K$
#6
1K$
#7
0K$
#8
1K$
#9
0K$
#10
1K$
#11
0K$
#12
1K$
#13
0K$
#14
1K$
#15
0K$
#16
1K$
#17
0K$
#18
1K$
#19
0K$
#20
1K$
